{"version":3,"sources":["ColorButtons.js","PositionedCircle.js","PositionedColorfulCircles.js","App.js","reportWebVitals.js","index.js"],"names":["ColorButtons","props","options","map","color","className","style","backgroundColor","onClick","addColor","defaultProps","PositionedCircle","colorObj","position","top","y","left","x","width","height","onMouseOver","changePosition","idx","getRandom","min","max","Math","random","ColorfulCircles","useState","colors","setColors","i","colorsCopy","newColor","size","App","PositionedColorfulCircles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGA,SAASA,EAAaC,GACpB,OACE,8BACGA,EAAMC,QAAQC,KAAI,SAAAC,GAAK,OACtB,wBACEC,UAAU,sBACVC,MAAO,CAAEC,gBAAiBH,GAC1BI,QAAS,kBAAMP,EAAMQ,SAASL,IAHhC,SAMGA,GAFIA,QASfJ,EAAaU,aAAe,CAC1BR,QAAS,CAAC,MAAO,QAAS,aAAc,SAAU,WAGrCF,Q,MCEAW,MAvBf,SAA0BV,GAKxB,OACE,qBACEI,UAAU,SACVC,MAAO,CACLC,gBAAiBN,EAAMW,SAASR,MAChCS,SAAU,WACVC,IAAI,GAAD,OAAKb,EAAMW,SAASG,EAApB,MACHC,KAAK,GAAD,OAAKf,EAAMW,SAASK,EAApB,MACJC,MAAM,GAAD,OAAKjB,EAAMW,SAASM,MAApB,MACLC,OAAO,GAAD,OAAKlB,EAAMW,SAASO,OAApB,OAERC,YAfiB,WACnBnB,EAAMoB,eAAepB,EAAMqB,MAI3B,SAYGrB,EAAMqB,IAAM,KCjBnB,SAASC,IAA+B,IAArBC,EAAoB,uDAAd,EAAGC,EAAW,uDAAL,IAChC,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,EA4CxBI,MAzCf,WAA4B,IAAD,EACGC,mBAAS,IADZ,mBAClBC,EADkB,KACVC,EADU,KAUnBV,EAAiB,SAAAW,GACrBD,GAAU,SAAAD,GAER,IAAMG,EAAU,YAAOH,GASvB,OANAG,EAAWD,GAAX,2BACKF,EAAOE,IADZ,IAEEf,EAAGM,IACHR,EAAGQ,MAGEU,MAIX,OACE,gCACE,cAAC,EAAD,CAAcxB,SAzBD,SAAAyB,GACf,IAAIC,EAAOZ,IACXQ,GAAU,SAAAD,GAAM,4BACXA,GADW,CAEd,CAAE1B,MAAO8B,EAAUjB,EAAGM,IAAaR,EAAGQ,IAAaL,MAAOiB,EAAMhB,OAAQgB,WAsBvEL,EAAO3B,KAAI,SAACS,EAAUoB,GAAX,OACV,cAAC,EAAD,CACEpB,SAAUA,EAEVU,IAAKU,EACLX,eAAgBA,GAFXW,UCxBAI,MAZf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,mDACA,2GACE,uBADF,uDAGA,cAACgC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e5846c3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ColorButtons.css\";\n\nfunction ColorButtons(props) {\n  return (\n    <div>\n      {props.options.map(color => (\n        <button\n          className=\"ColorButtons-button\"\n          style={{ backgroundColor: color }}\n          onClick={() => props.addColor(color)}\n          key={color}\n        >\n          {color}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nColorButtons.defaultProps = {\n  options: [\"red\", \"green\", \"aquamarine\", \"orange\", \"purple\"]\n};\n\nexport default ColorButtons;\n","import React from \"react\";\nimport \"./PositionedCircle.css\";\n\nfunction PositionedCircle(props) {\n  const handleChange = () => {\n    props.changePosition(props.idx);\n  }\n\n  return (\n    <div\n      className=\"Circle\"\n      style={{\n        backgroundColor: props.colorObj.color,\n        position: \"absolute\",\n        top: `${props.colorObj.y}vh`,\n        left: `${props.colorObj.x}vw`,\n        width: `${props.colorObj.width}px`,\n        height: `${props.colorObj.height}px`,\n      }}\n      onMouseOver={handleChange}\n    >\n      {props.idx + 1}\n    </div>\n  );\n}\n\nexport default PositionedCircle;\n","import React, { useState } from \"react\";\nimport ColorButtons from \"./ColorButtons\";\nimport PositionedCircle from \"./PositionedCircle\";\n\nfunction getRandom(min = 0, max = 100) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction ColorfulCircles() {\n  const [colors, setColors] = useState([]);\n\n  const addColor = newColor => {\n    let size = getRandom()\n    setColors(colors => [\n      ...colors,\n      { color: newColor, x: getRandom(), y: getRandom(), width: size, height: size }\n    ]);\n  };\n  const changePosition = i => {\n    setColors(colors => {\n      // create a copy of state array\n      const colorsCopy = [...colors];\n      // create a copy of the object at index i,\n      // then change the copy\n      colorsCopy[i] = {\n        ...colors[i],\n        x: getRandom(),\n        y: getRandom()\n      };\n      // return colorsCopy;\n      return colorsCopy;\n    });\n  };\n\n  return (\n    <div>\n      <ColorButtons addColor={addColor} />\n      {colors.map((colorObj, i) => (\n        <PositionedCircle\n          colorObj={colorObj}\n          key={i}\n          idx={i}\n          changePosition={changePosition}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ColorfulCircles;\n","import React from \"react\";\nimport \"./App.css\";\nimport PositionedColorfulCircles from \"./PositionedColorfulCircles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Colorful Circles!</h1>\n      <p>Click on a button to add a colored circle with a random position and size.\n        <br></br>\n        Hover the mouse over a circle to chase it around.</p>\n      <PositionedColorfulCircles />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}